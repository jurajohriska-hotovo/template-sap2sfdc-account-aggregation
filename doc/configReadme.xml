<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and SAP Account Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
I want to aggregate accounts from Salesforce and customers from SAP and compare them to see which ones can only be found in one of the two systems and which ones are in both.

For practical purposes this Template will generate the result in the format of a CSV Report sent by e-mail.

This Template should serve as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects and generating a report on the differences.

As implemented, it gets accounts from Salesforce and customers from SAP using standard BAPI **BAPI\_CUSTOMER\_GETLIST**, compares them by the name, and generates a CSV file which shows Account in Salesforce, Customer in SAP, and Accounts in Salesforce and SAP. The report is then e-mailed to a configured group of e-mail addresses.
		</section>
		<section id="considerations">
		<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered.
All of them deal with the preparations in both systems (SAP and SFDC), that must be made in order for all to run smoothly.
**Failing to do so could lead to unexpected behavior of the template.**

Before continue with the use of this Anypoint Template, you may want to check out this [Documentation Page](http://www.mulesoft.org/documentation/display/current/SAP+Connector#SAPConnector-EnablingYourStudioProjectforSAP), that will teach you how to work 
with SAP and Anypoint Studio.

## Disclaimer

This Anypoint template uses a few private Maven dependencies from Mulesoft in order to work. If you intend to run this template with Maven support, you need to add three extra dependencies for SAP to the pom.xml file.
]]>
		</section>
		<section id="default_sap_src">
$H$H# As source of data

SAP backend system is used as data source for aggregation.
Data is read by RFC call of BAPI function to SAP.
SAP Connector needs to be properly customized as per chapter: [Properties to be configured](#propertiestobeconfigured)
		</section>
		<section id="running_on_studio">
		<![CDATA[
In order to make this Anypoint Template run on Mule Studio there are a few extra steps that needs to be made.
Please check this Documentation Page:

+ [Enabling Your Studio Project for SAP](https://docs.mulesoft.com/connectors/sap-connector#configuring-the-connector-in-studio-7)
		]]>
		</section>
		<section id="application_configuration">
		<![CDATA[

**HTTP Connector configuration**

+ http.port `9090`		
		
**SAP Connector configuration**

+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

**SalesForce Connector configuration**

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**SMTP Services configuration**

+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `gmailuser`
+ smtp.password `gmailpassword`

**Mail details**

+ mail.from `your.email@gmail.com`
+ mail.to `your.email@gmail.com`
+ mail.subject `Mail subject`
+ mail.body `Aggregation Report`
+ attachment.name `aggregation_report.csv`

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. However, we make API call to Salesforce only once during aggregation.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will found the endpoint to start the aggregation. This Template has an HTTP Inbound Endpoint as the way to trigger the use case.
$H$H# Trigger Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of conducting the aggregation of data, comparing records and finally formating the output, in this case being a report.
Using Scatter-Gather component we are querying the data in different systems. After that the aggregation is implemented in DataWeave 2 script using Transform component.
Aggregated results are sorted by source of existence:
1. Accounts only in Salesforce
2. Accounts only in SAP (customers)
3. Accounts in both Salesforce and SAP (customers) 
and transformed to CSV format. Final report in CSV format is sent to email, that you configured in mule.*.properties file.
]]>
		</section>
		
	</sections>
</configuration>
