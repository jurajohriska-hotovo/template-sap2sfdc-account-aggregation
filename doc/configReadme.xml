<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and SAP Account Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
I want to aggregate accounts from Salesforce and customers from SAP and compare them to see which ones can only be found in one of the two systems and which ones are in both.

This template:

- Generates its results as a CSV report that is sent by email to the addresses you configure.
- Extracts data from two systems, aggregates the data, compares the values of the fields for the objects, and generates a report on the differences.
- Gets accounts from Salesforce and customers from SAP using standard BAPI BAPI_CUSTOMER_GETLIST, compares them by name, and generates a CSV file that shows the Salesforce account, customer in SAP, and accounts in Salesforce and SAP. The report is then emailed to a configured group of email addresses.
		</section>
		<section id="considerations">
		<![CDATA[
To make this template run, there are certain preconditions that must be considered.
All of them deal with the preparations in both systems (SAP and SFDC), that must be made in order for all to run smoothly.
Failing to do so could lead to unexpected behavior of the template.

## Disclaimer

This template uses a few private Maven dependencies from MuleSoft to work. If you intend to run this template with Maven support, you need to add three extra dependencies for SAP in the pom.xml file.
]]>
		</section>
		<section id="default_sap_src">
$H$H# As a Data Source

SAP backend system is used as data source for aggregation.
Data is read by RFC call of BAPI function to SAP.
SAP Connector needs to be properly customized as "Properties to Configure".
		</section>
		<section id="running_on_studio">
		<![CDATA[
To make this template run on Studio, there are a few extra steps that needs to be made.
Search for "Enabling Your Studio Project for SAP" at `https://docs.mulesoft.com`.
		]]>
		</section>
		<section id="application_configuration">
		<![CDATA[

**HTTP Connector Configuration**

+ http.port `9090`		
		
**SAP Connector Configuration**

+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

**SalesForce Connector Configuration**

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**SMTP Services Configuration**

+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `examplemailuser`
+ smtp.password `examplemailpassword`

**Email Details**

+ mail.from `your.email@example.com`
+ mail.to `your.email@example.com`
+ mail.subject `Mail subject`
+ mail.body `Aggregation Report`
+ attachment.name `aggregation_report.csv`

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. However, this template 
makes an API call to Salesforce only once during aggregation.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
The file with the endpoint that starts the aggregation. This template uses an HTTP Listener to trigger the use case.
$H$H# Trigger Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` that you are free to change to the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub then routes requests from your application domain URL to the endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of this template is implemented on this XML, directed by a flow responsible for conducting the aggregation of data, comparing records, and formatting the output in this case a report.
Using the Scatter-Gather component this template queries the data in different systems. After that, the aggregation is implemented in a DataWeave 2 script using the Transform component.

Aggregated results are sorted by source of existence:

1. Accounts only in Salesforce.
2. Accounts only in SAP (customers).
3. Accounts in both Salesforce and SAP (customers) 
and transformed to CSV format. The final report in CSV format is sent to the email addresses that you configured in the  mule.*.properties file.
]]>
		</section>
		
	</sections>
</configuration>
